import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

// Server Class
class Server {
    private static final int PORT = 12345;
    private static final ExecutorService threadPool = Executors.newFixedThreadPool(10);
    private static HashMap<String, ArrayList<String>> dataStore = new HashMap<>();

    public static void main(String[] args) {
        try (ServerSocket serverSocket = new ServerSocket(PORT)) {
            System.out.println("Server started on port " + PORT);

            while (true) {
                Socket clientSocket = serverSocket.accept();
                threadPool.execute(new ClientHandler(clientSocket));
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    static class ClientHandler implements Runnable {
        private Socket socket;

        public ClientHandler(Socket socket) {
            this.socket = socket;
        }

        public void run() {
            try (BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                 PrintWriter out = new PrintWriter(socket.getOutputStream(), true)) {

                String request = in.readLine();
                System.out.println("Received: " + request);

                String[] parts = request.split(" ");
                String command = parts[0];
                String key = parts[1];

                synchronized (dataStore) {
                    switch (command) {
                        case "PUT":
                            String value = parts[2];
                            dataStore.computeIfAbsent(key, k -> new ArrayList<>()).add(value);
                            out.println("Added");
                            break;
                        case "GET":
                            ArrayList<String> values = dataStore.get(key);
                            out.println(values != null ? values.toString() : "Not Found");
                            break;
                        case "REMOVE":
                            if (dataStore.containsKey(key)) {
                                dataStore.remove(key);
                                out.println("Removed");
                            } else {
                                out.println("Not Found");
                            }
                            break;
                        default:
                            out.println("Unknown Command");
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}

// Client GUI Class
class ClientGUI {
    private JFrame frame;
    private JTextField keyField, valueField;
    private JTextArea responseArea;

    public ClientGUI() {
        frame = new JFrame("Client GUI");
        frame.setSize(500, 400);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new GridLayout(5, 2));

        JLabel keyLabel = new JLabel("Key:");
        keyField = new JTextField();
        JLabel valueLabel = new JLabel("Value:");
        valueField = new JTextField();
        JButton putButton = new JButton("PUT");
        JButton getButton = new JButton("GET");
        JButton removeButton = new JButton("REMOVE");
        responseArea = new JTextArea();

        frame.add(keyLabel);
        frame.add(keyField);
        frame.add(valueLabel);
        frame.add(valueField);
        frame.add(putButton);
        frame.add(getButton);
        frame.add(removeButton);
        frame.add(new JScrollPane(responseArea));

        putButton.addActionListener(e -> sendRequest("PUT"));
        getButton.addActionListener(e -> sendRequest("GET"));
        removeButton.addActionListener(e -> sendRequest("REMOVE"));

        frame.setVisible(true);
    }

    private void sendRequest(String command) {
        try (Socket socket = new Socket("localhost", 12345);
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {

            String request = command + " " + keyField.getText();
            if (command.equals("PUT")) {
                request += " " + valueField.getText();
            }
            out.println(request);

            String response = in.readLine();
            responseArea.append(response + "\n");

        } catch (IOException e) {
            responseArea.append("Error: " + e.getMessage() + "\n");
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(ClientGUI::new);
    }
}

// JUnit Test
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class ServerTest {

    @Test
    void testPUTandGET() throws IOException {
        try (Socket socket = new Socket("localhost", 12345);
             PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
             BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream()))) {

            out.println("PUT key1 value1");
            assertEquals("Added", in.readLine());

            out.println("GET key1");
            assertEquals("[value1]", in.readLine());

            out.println("REMOVE key1");
            assertEquals("Removed", in.readLine());

            out.println("GET key1");
            assertEquals("Not Found", in.readLine());
        }
    }
}
